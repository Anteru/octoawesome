
uniform float AmbientIntensity;
uniform vec4 AmbientColor;
uniform float DiffuseIntensity;
uniform vec4 DiffuseColor;
uniform vec3 DiffuseDirection;
uniform sampler2DArray BlockTextures;
uniform sampler2D ShadowMap;


in vec3 psNormal;
in vec2 psTexcoord;
flat in uint psTexIndex;

in vec4 shadowPosition;

out vec4 outColor;
void main()
{

    float lighted = 1.0f;
    float cosTheta = clamp(dot(psNormal,DiffuseDirection),0,1);
    
    float bias = 0.00002*tan(acos(cosTheta)); // cosTheta is dot( n,l ), clamped between 0 and 1
    bias = clamp(bias, 0.00002,0.0001);

    if (shadowPosition.x >-1 && shadowPosition.x <1 &&  
        shadowPosition.y > -1 && shadowPosition.y <1 && 
        texture( ShadowMap,  shadowPosition.xy).z  <  (shadowPosition.z - bias)){
        lighted = DiffuseIntensity;
    }

	vec4 texColor = texture(BlockTextures,vec3(psTexcoord,psTexIndex));
	vec4 ambient = AmbientColor * AmbientIntensity;
	vec4 diffuse = lighted*clamp(dot(-DiffuseDirection,psNormal),0.0,1.0) * DiffuseColor * DiffuseIntensity;
	outColor = texColor * clamp(ambient + vec4(diffuse.rgb,1.0),0.0,1.0);
}
